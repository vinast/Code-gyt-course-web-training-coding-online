import { elementFinderProperty, elementDataProperty, } from './element';
import { stringToIcon, validateIcon, } from '@iconify/core/lib/icon/name';
/**
 * List of modules
 */
const finders = [];
/**
 * Add module
 */
export function addFinder(finder) {
    if (finders.indexOf(finder) === -1) {
        finders.push(finder);
    }
}
/**
 * Clean icon name: convert from string if needed and validate
 */
export function cleanIconName(name) {
    if (typeof name === 'string') {
        name = stringToIcon(name);
    }
    return name === null || !validateIcon(name) ? null : name;
}
/**
 * Compare customisations. Returns true if identical
 */
function compareCustomisations(list1, list2) {
    const keys1 = Object.keys(list1);
    const keys2 = Object.keys(list2);
    if (keys1.length !== keys2.length) {
        return false;
    }
    for (let i = 0; i < keys1.length; i++) {
        const key = keys1[i];
        if (list2[key] !== list1[key]) {
            return false;
        }
    }
    return true;
}
/**
 * Find all placeholders
 */
export function findPlaceholders(root) {
    const results = [];
    finders.forEach((finder) => {
        const elements = finder.find(root);
        Array.prototype.forEach.call(elements, (item) => {
            const element = item;
            if (element[elementFinderProperty] !== void 0 &&
                element[elementFinderProperty] !== finder) {
                // Element is assigned to a different finder
                return;
            }
            // Get icon name
            const name = cleanIconName(finder.name(element));
            if (name === null) {
                // Invalid name - do not assign this finder to element
                return;
            }
            // Assign finder to element and add it to results
            element[elementFinderProperty] = finder;
            const placeholder = {
                element,
                finder,
                name,
            };
            results.push(placeholder);
        });
    });
    // Find all modified SVG
    const elements = root.querySelectorAll('svg.iconify');
    Array.prototype.forEach.call(elements, (item) => {
        const element = item;
        const finder = element[elementFinderProperty];
        const data = element[elementDataProperty];
        if (!finder || !data) {
            return;
        }
        // Get icon name
        const name = cleanIconName(finder.name(element));
        if (name === null) {
            // Invalid name
            return;
        }
        let updated = false;
        let customisations;
        if (name.prefix !== data.name.prefix || name.name !== data.name.name) {
            updated = true;
        }
        else {
            customisations = finder.customisations(element);
            if (!compareCustomisations(data.customisations, customisations)) {
                updated = true;
            }
        }
        // Add item to results
        if (updated) {
            const placeholder = {
                element,
                finder,
                name,
                customisations,
            };
            results.push(placeholder);
        }
    });
    return results;
}
