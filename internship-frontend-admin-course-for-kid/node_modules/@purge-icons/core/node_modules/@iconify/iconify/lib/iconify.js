import { storageFunctions, } from '@iconify/core/lib/storage/functions';
import { builderFunctions, } from '@iconify/core/lib/builder/functions';
// Modules
import { coreModules } from '@iconify/core/lib/modules';
// Cache
import { storeCache, loadCache } from '@iconify/core/lib/browser-storage/';
import { toggleBrowserCache, } from '@iconify/core/lib/browser-storage/functions';
// API
import { APIFunctions, APIInternalFunctions, } from '@iconify/core/lib/api/functions';
import { API } from '@iconify/core/lib/api/';
import { setAPIModule, } from '@iconify/core/lib/api/modules';
import { setAPIConfig, getAPIConfig, } from '@iconify/core/lib/api/config';
import { getAPIModule as getJSONPAPIModule } from '@iconify/core/lib/api/modules/jsonp';
import { getAPIModule as getFetchAPIModule, getFetch, } from '@iconify/core/lib/api/modules/fetch';
// Other
import { commonFunctions } from './common';
/**
 * Browser cache functions
 */
const browserCacheFunctions = {
    // enableCache() has optional second parameter for backwards compatibility
    enableCache: (storage, enable) => toggleBrowserCache(storage, enable !== false),
    disableCache: (storage) => toggleBrowserCache(storage, true),
};
/**
 * Global variable
 */
const Iconify = {
    // Exposed internal API functions
    _api: APIInternalFunctions,
};
// Add functions
[
    storageFunctions,
    builderFunctions,
    commonFunctions,
    browserCacheFunctions,
    APIFunctions,
].forEach((list) => {
    for (const key in list) {
        Iconify[key] = list[key];
    }
});
/**
 * Initialise stuff
 */
// Check for Fetch API
const fetchModule = getFetch();
// Set API
coreModules.api = API;
let getAPIModule;
try {
    getAPIModule =
        typeof fetchModule === 'function' && typeof Promise === 'function'
            ? getFetchAPIModule
            : getJSONPAPIModule;
}
catch (err) {
    getAPIModule = getJSONPAPIModule;
}
setAPIModule('', getAPIModule(getAPIConfig));
if (typeof document !== 'undefined' && typeof window !== 'undefined') {
    // Set cache and load existing cache
    coreModules.cache = storeCache;
    loadCache();
    const _window = window;
    if (_window
        .IconifyProviders !== void 0) {
        const providers = _window
            .IconifyProviders;
        if (typeof providers === 'object' && providers !== null) {
            for (let key in providers) {
                const err = 'IconifyProviders[' + key + '] is invalid.';
                try {
                    const value = providers[key];
                    if (typeof value !== 'object' ||
                        !value ||
                        value.resources === void 0) {
                        continue;
                    }
                    if (!setAPIConfig(key, value)) {
                        console.error(err);
                    }
                }
                catch (e) {
                    console.error(err);
                }
            }
        }
    }
}
export default Iconify;
